#version 330

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

out vec3 color;

uniform sampler2D textureSampler;
uniform vec3 LightPosition_worldspace;

void main(){
  vec3 LightColor = vec3(1,1,1);
  float LightPower = 50.0f;

  vec3 MaterialDiffuseColor = texture2D(textureSampler, UV).rgb;
  vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
  vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

  float distance = length( LightPosition_worldspace - Position_worldspace );

  vec3 normal = normalize( Normal_cameraspace );
  vec3 light = normalize( LightDirection_cameraspace );
  float cosTheta = clamp( dot(normal, light), 0, 1);

  vec3 eye_norm = normalize(EyeDirection_cameraspace);
  vec3 reflection = reflect(-light, normal);
  float cosAlpha = clamp( dot(eye_norm, reflection), 0, 1);
  color = (MaterialAmbientColor +
	   MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
	   MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance));
}
